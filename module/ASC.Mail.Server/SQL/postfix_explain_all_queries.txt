------------------------------------------------------------------------------------------------
--	 						PostfixServer.cs        										  --
------------------------------------------------------------------------------------------------
1.  protected override List<WebDomainBase> _GetWebDomains(ICollection<string> domain_names)

	db.ExecuteList(
		new SqlQuery(DomainTable.name)
                .Select(DomainTable.Columns.domain, DomainTable.Columns.created)
                .Where(DomainTable.Columns.active, 1)
                .Where(Exp.In(DomainTable.Columns.domain, names_arg))
                .OrderBy(DomainTable.Columns.created, true));

QUERY:
	SELECT domain, created 
	FROM domain 
	WHERE active = 1 AND domain IN ('onlyoffice.tk','teamlab.tk') 
	ORDER BY created ASC
	
EXPLAIN:
	<table_data name="UnknownTable">
		<row>
			<field name="id">1</field>
			<field name="select_type">SIMPLE</field>
			<field name="table">domain</field>
			<field name="type">ref</field>
			<field name="possible_keys">PRIMARY,active</field>
			<field name="key">active</field>
			<field name="key_len">1</field>
			<field name="ref">const</field>
			<field name="rows">1</field>
			<field name="Extra">Using where; Using filesort</field>
		</row>
	</table_data>

COMMENT:
------------------------------------------------------------------------------------------------

2.  protected override List<MailboxBase> _GetMailboxes(ICollection<string> mailbox_names)

	db.ExecuteList(
		new SqlQuery(MailboxTable.name.Alias(mailbox_ns))
                .InnerJoin(AliasTable.name.Alias(address_ns),
                           Exp.EqColumns(MailboxTable.Columns.domain.Prefix(mailbox_ns),
                                         AliasTable.Columns.domain.Prefix(address_ns)))
                .InnerJoin(DomainTable.name.Alias(domain_ns),
                           Exp.EqColumns(MailboxTable.Columns.domain.Prefix(mailbox_ns),
                                         DomainTable.Columns.domain.Prefix(domain_ns)))
                .Select(MailboxTable.Columns.username.Prefix(mailbox_ns))
                .Select(MailboxTable.Columns.password.Prefix(mailbox_ns))
                .Select(MailboxTable.Columns.name.Prefix(mailbox_ns))
                .Select(MailboxTable.Columns.maildir.Prefix(mailbox_ns))
                .Select(MailboxTable.Columns.quota.Prefix(mailbox_ns))
                .Select(MailboxTable.Columns.local_part.Prefix(mailbox_ns))
                .Select(MailboxTable.Columns.domain.Prefix(mailbox_ns))
                .Select(MailboxTable.Columns.created.Prefix(mailbox_ns))
                .Select(MailboxTable.Columns.modified.Prefix(mailbox_ns))
                .Select(MailboxTable.Columns.active.Prefix(mailbox_ns))
                .Select(AliasTable.Columns.address.Prefix(address_ns))
                .Select(AliasTable.Columns.redirect.Prefix(address_ns))
                .Select(AliasTable.Columns.domain.Prefix(address_ns))
                .Select(AliasTable.Columns.created.Prefix(address_ns))
                .Select(AliasTable.Columns.modified.Prefix(address_ns))
                .Select(AliasTable.Columns.active.Prefix(address_ns))
                .Select(DomainTable.Columns.domain.Prefix(domain_ns))
                .Select(DomainTable.Columns.description.Prefix(domain_ns))
                .Select(DomainTable.Columns.aliases.Prefix(domain_ns))
                .Select(DomainTable.Columns.mailboxes.Prefix(domain_ns))
                .Select(DomainTable.Columns.maxquota.Prefix(domain_ns))
                .Select(DomainTable.Columns.quota.Prefix(domain_ns))
                .Select(DomainTable.Columns.transport.Prefix(domain_ns))
                .Select(DomainTable.Columns.backupmx.Prefix(domain_ns))
                .Select(DomainTable.Columns.created.Prefix(domain_ns))
                .Select(DomainTable.Columns.modified.Prefix(domain_ns))
                .Select(DomainTable.Columns.active.Prefix(domain_ns))
                .Where(MailboxTable.Columns.active.Prefix(mailbox_ns), 1)
                .Where(AliasTable.Columns.active.Prefix(address_ns), true)
                .Where(AliasTable.Columns.is_group.Prefix(address_ns), false)
                .Where(Exp.In(MailboxTable.Columns.username.Prefix(mailbox_ns), names_arg))
                .Where(Exp.EqColumns(AliasTable.Columns.redirect.Prefix(address_ns),
                                     MailboxTable.Columns.username.Prefix(mailbox_ns)));

QUERY:
	SELECT msm.username, msm.password, msm.name, msm.maildir, msm.quota, msm.local_part, msm.domain, 
	msm.created, msm.modified, msm.active, msa.address, msa.goto, msa.domain, msa.created, msa.modified, 
	msa.active, msd.domain, msd.description, msd.aliases, msd.mailboxes, msd.maxquota, msd.quota, 
	msd.transport, msd.backupmx, msd.created, msd.modified, msd.active 
	FROM mailbox msm 
	INNER JOIN alias msa ON msm.domain = msa.domain 
	INNER JOIN domain msd ON msm.domain = msd.domain 
	WHERE msm.active = 1 AND msa.active = True AND msa.islist = False 
	AND msm.username IN('123@onlyoffice.tk','1233@onlyoffice.tk','1233@onlyoffice.tk') AND msa.goto = msm.username
	
EXPLAIN:
	<table_data name="UnknownTable">
		<row>
			<field name="id">1</field>
			<field name="select_type">SIMPLE</field>
			<field name="table">msa</field>
			<field name="type">ref</field>
			<field name="possible_keys">domain,islist,active</field>
			<field name="key">islist</field>
			<field name="key_len">1</field>
			<field name="ref">const</field>
			<field name="rows">3</field>
			<field name="Extra">Using where</field>
		</row>
		<row>
			<field name="id">1</field>
			<field name="select_type">SIMPLE</field>
			<field name="table">msd</field>
			<field name="type">ALL</field>
			<field name="possible_keys">PRIMARY</field>
			<field name="key" xsi:nil="true" />
			<field name="key_len" xsi:nil="true" />
			<field name="ref" xsi:nil="true" />
			<field name="rows">2</field>
			<field name="Extra">Using where; Using join buffer</field>
		</row>
		<row>
			<field name="id">1</field>
			<field name="select_type">SIMPLE</field>
			<field name="table">msm</field>
			<field name="type">eq_ref</field>
			<field name="possible_keys">PRIMARY,domain,active</field>
			<field name="key">PRIMARY</field>
			<field name="key_len">767</field>
			<field name="ref">vmail.msa.goto</field>
			<field name="rows">1</field>
			<field name="Extra">Using where</field>
		</row>
	</table_data>

COMMENT: Много возможных индексов; Не хватает ключа
------------------------------------------------------------------------------------------------

3.  protected override ICollection<MailGroupBase> _GetMailGroups(ICollection<string> mail_groups_addresses)

	const string address_alias = "maa";

	db.ExecuteList(
		new SqlQuery(AliasTable.name + " " + address_alias)
                        .InnerJoin(DomainTable.name + " " + domain_alias,
                                   Exp.EqColumns(AliasTable.Columns.domain.Prefix(address_alias),
                                                 DomainTable.Columns.domain.Prefix(domain_alias)
                                       )
                        )
                        .Select(AliasTable.Columns.address.Prefix(address_alias))
                        .Select(AliasTable.Columns.redirect.Prefix(address_alias))
                        .Select(AliasTable.Columns.domain.Prefix(address_alias))
                        .Select(AliasTable.Columns.created.Prefix(address_alias))
                        .Select(AliasTable.Columns.modified.Prefix(address_alias))
                        .Select(AliasTable.Columns.active.Prefix(address_alias))
                        .Select(DomainTable.Columns.domain.Prefix(domain_alias))
                        .Select(DomainTable.Columns.description.Prefix(domain_alias))
                        .Select(DomainTable.Columns.aliases.Prefix(domain_alias))
                        .Select(DomainTable.Columns.mailboxes.Prefix(domain_alias))
                        .Select(DomainTable.Columns.maxquota.Prefix(domain_alias))
                        .Select(DomainTable.Columns.quota.Prefix(domain_alias))
                        .Select(DomainTable.Columns.transport.Prefix(domain_alias))
                        .Select(DomainTable.Columns.backupmx.Prefix(domain_alias))
                        .Select(DomainTable.Columns.created.Prefix(domain_alias))
                        .Select(DomainTable.Columns.modified.Prefix(domain_alias))
                        .Select(DomainTable.Columns.active.Prefix(domain_alias)
						.Where(AliasTable.Columns.active.Prefix(address_alias), true)
                        .Where(AliasTable.Columns.is_group.Prefix(address_alias), true)
						.Where(Exp.In(AliasTable.Columns.address.Prefix(address_alias), mail_groups_addresses.ToArray()));

QUERY:
	SELECT maa.address, maa.goto, maa.domain, maa.created, maa.modified, maa.active, mda.domain, mda.description, 
	mda.aliases, mda.mailboxes, mda.maxquota, mda.quota, mda.transport, mda.backupmx, mda.created, mda.modified, mda.active 
	FROM alias maa 
	INNER JOIN domain mda ON maa.domain = mda.domain 
	WHERE maa.active = True AND maa.islist = True AND maa.address IN ('123@teamlab.tk','group@teamlab.tk')
	
EXPLAIN:
	<table_data name="UnknownTable">
		<row>
			<field name="id">1</field>
			<field name="select_type">SIMPLE</field>
			<field name="table">maa</field>
			<field name="type">ref</field>
			<field name="possible_keys">PRIMARY,domain,islist,active</field>
			<field name="key">islist</field>
			<field name="key_len">1</field>
			<field name="ref">const</field>
			<field name="rows">1</field>
			<field name="Extra">Using where</field>
		</row>
		<row>
			<field name="id">1</field>
			<field name="select_type">SIMPLE</field>
			<field name="table">mda</field>
			<field name="type">eq_ref</field>
			<field name="possible_keys">PRIMARY</field>
			<field name="key">PRIMARY</field>
			<field name="key_len">767</field>
			<field name="ref">vmail.maa.domain</field>
			<field name="rows">1</field>
			<field name="Extra"></field>
		</row>
	</table_data>


COMMENT: Много возможных индексов;
------------------------------------------------------------------------------------------------

4.  protected override WebDomainBase _GetWebDomain(string domain_name)


	db.ExecuteList(
		new SqlQuery(DomainTable.name)
                .Select(DomainTable.Columns.domain, DomainTable.Columns.created)
                .Where(DomainTable.Columns.active, 1)
                .Where(DomainTable.Columns.domain, domain_name);

QUERY:
	SELECT domain, created 
	FROM domain 
	WHERE active = 1 AND domain = 'teamlab.tk'
	
EXPLAIN:
	<table_data name="UnknownTable">
		<row>
			<field name="id">1</field>
			<field name="select_type">SIMPLE</field>
			<field name="table">domain</field>
			<field name="type">const</field>
			<field name="possible_keys">PRIMARY,active</field>
			<field name="key">PRIMARY</field>
			<field name="key_len">767</field>
			<field name="ref">const</field>
			<field name="rows">1</field>
			<field name="Extra"></field>
		</row>
	</table_data>

COMMENT: Много возможных индексов;

------------------------------------------------------------------------------------------------
--	 						PostfixDomain.cs        										  --
------------------------------------------------------------------------------------------------

1.  protected override void _AddDkim(DkimRecordBase dkim_to_add)

	db.ExecuteScalar<int>(
			new SqlQuery(DkimTable.name)
				.Select(DkimTable.Columns.id)
				.Where(DkimTable.Columns.domain_name, Name));

QUERY:
	SELECT id 
	FROM dkim 
	WHERE domain_name = 'teamlab.tk' 
	
EXPLAIN:
	<table_data name="UnknownTable">
		<row>
			<field name="id">1</field>
			<field name="select_type">SIMPLE</field>
			<field name="table">dkim</field>
			<field name="type">ref</field>
			<field name="possible_keys">domain_name</field>
			<field name="key">domain_name</field>
			<field name="key_len">257</field>
			<field name="ref">const</field>
			<field name="rows">1</field>
			<field name="Extra">Using where; Using index</field>
		</row>
	</table_data>


COMMENT: 
------------------------------------------------------------------------------------------------

2.  protected override void _AddDkim(DkimRecordBase dkim_to_add)

	db.ExecuteNonQuery
			new SqlUpdate(DkimTable.name)
					.Where(DkimTable.Columns.id, id_dkim)
					.Set(DkimTable.Columns.selector, dkim_to_add.Selector)
					.Set(DkimTable.Columns.private_key, dkim_to_add.PrivateKey)
					.Set(DkimTable.Columns.public_key, dkim_to_add.PublicKey));

QUERY:
	SELECT id FROM dkim WHERE id = 34 
	
EXPLAIN:
	<table_data name="UnknownTable">
		<row>
			<field name="id">1</field>
			<field name="select_type">SIMPLE</field>
			<field name="table">dkim</field>
			<field name="type">const</field>
			<field name="possible_keys">PRIMARY</field>
			<field name="key">PRIMARY</field>
			<field name="key_len">4</field>
			<field name="ref">const</field>
			<field name="rows">1</field>
			<field name="Extra">Using index</field>
		</row>
	</table_data>

COMMENT: 

------------------------------------------------------------------------------------------------
--	 						PostfixMailGroup.cs        										  --
------------------------------------------------------------------------------------------------

1.  private void UpdateGroupMembers(IDbManager db, IEnumerable<string> members_addresses)

	db.ExecuteNonQuery(
			new SqlUpdate(AliasTable.name)
                .Set(AliasTable.Columns.redirect, members_string)
                .Set(AliasTable.Columns.modified, DateTime.UtcNow.ToDbStyle())
                .Where(AliasTable.Columns.address, Address.ToString());

QUERY:
	SELECT * FROM alias WHERE address = '23@teamlab.tk'
	
EXPLAIN:
	<table_data name="UnknownTable">
		<row>
			<field name="id">1</field>
			<field name="select_type">SIMPLE</field>
			<field name="table">alias</field>
			<field name="type">const</field>
			<field name="possible_keys">PRIMARY</field>
			<field name="key">PRIMARY</field>
			<field name="key_len">767</field>
			<field name="ref">const</field>
			<field name="rows">1</field>
			<field name="Extra"></field>
		</row>
	</table_data>

COMMENT: 
