1. public MailAttachment GetMessageAttachment(int attach_id, int id_tenant, string id_user = null)

var query = new SqlQuery(AttachmentTable.name)
                .InnerJoin(MailTable.name,
                           Exp.EqColumns(MailTable.Columns.id.Prefix(MailTable.name),
                                         AttachmentTable.Columns.id_mail.Prefix(AttachmentTable.name)))
                .Select(AttachmentTable.Columns.id.Prefix(AttachmentTable.name),
                        AttachmentTable.Columns.name.Prefix(AttachmentTable.name),
                        AttachmentTable.Columns.stored_name.Prefix(AttachmentTable.name),
                        AttachmentTable.Columns.type.Prefix(AttachmentTable.name),
                        AttachmentTable.Columns.size.Prefix(AttachmentTable.name),
                        AttachmentTable.Columns.file_number.Prefix(AttachmentTable.name),
                        MailTable.Columns.stream.Prefix(MailTable.name),
                        MailTable.Columns.id_tenant.Prefix(MailTable.name),
                        MailTable.Columns.id_user.Prefix(MailTable.name),
                        AttachmentTable.Columns.content_id.Prefix(AttachmentTable.name));
                        .Where(AttachmentTable.Columns.id.Prefix(AttachmentTable.name), attach_id)
                    .Where(AttachmentTable.Columns.need_remove.Prefix(AttachmentTable.name), false);
                    
                var where_exp = string.IsNullOrEmpty(id_user)
                                    ? Exp.Eq(MailTable.Columns.id_tenant.Prefix(MailTable.name), id_tenant)
                                    : GetUserWhere(id_user, id_tenant, MailTable.name);

                query.Where(where_exp);
                
                db.ExecuteList(query)

QUERY:
SELECT mail_attachment.id, mail_attachment.name, mail_attachment.stored_name, mail_attachment.type, mail_attachment.size, mail_attachment.file_number, mail_mail.stream, mail_mail.tenant, mail_mail.id_user, mail_attachment.content_id
FROM mail_attachment
INNER JOIN mail_mail ON mail_mail.id = mail_attachment.id_mail
WHERE mail_attachment.id = @p0 AND mail_attachment.need_remove = @p1 AND mail_mail.tenant = @p2 AND mail_mail.id_user = @p3

EXPLAIN
SELECT mail_attachment.id, mail_attachment.name, mail_attachment.stored_name, mail_attachment.type, mail_attachment.size, mail_attachment.file_number, mail_mail.stream, mail_mail.tenant, mail_mail.id_user, mail_attachment.content_id
FROM mail_attachment
INNER JOIN mail_mail ON mail_mail.id = mail_attachment.id_mail
WHERE mail_attachment.id = 12271 AND mail_attachment.need_remove = 0 AND mail_mail.tenant = 10113 AND mail_mail.id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e'

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_attachment</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,quota_index,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


2. private void ReCountAttachments(DbManager db, int id_mail)

db.ExecuteNonQuery(
                  new SqlUpdate(MailTable.name)
                  .Set(MailTable.Columns.attach_count, count_attachments)
                  .Where(MailTable.Columns.id, id_mail));

QUERY:
UPDATE mail_mail SET attachments_count = @p0
WHERE id = @p1

EXPLAIN
SELECT * FROM mail_mail
WHERE id = 9306;

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


3. public long GetNextConversationId(int tenant, string user, int id, MailFilter filter)

var chain_date = db.ExecuteScalar<DateTime>(new SqlQuery(MailTable.name)
                    .Select(MailTable.Columns.chain_date)
                    .Where(GetUserWhere(user, tenant))
                    .Where(MailTable.Columns.id, id));


QUERY:
SELECT chain_date
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND id = @p2

EXPLAIN
SELECT chain_date
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


4. public void SetConversationsImportanceFlags(int tenant, string user, bool important, List<int> ids)

var chains_info_query = new SqlQuery(MailTable.name)
                .Select(MailTable.Columns.chain_id)
                .Select(MailTable.Columns.folder)
                .Select(MailTable.Columns.id_mailbox)
                .Where(GetUserWhere(user, tenant))
                .Where(Exp.In(MailTable.Columns.id, ids.Select(x => (object)x).ToArray()));
                
                var chains_info = db.ExecuteList(chains_info_query)

QUERY:
SELECT chain_id, folder, id_mailbox
FROM mail_mail
WHERE id = @p0 AND tenant = @p1 AND id_user = @p2

EXPLAIN
SELECT chain_id, folder, id_mailbox
FROM mail_mail
WHERE id = 9306 AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e'

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


5. public void SetConversationsImportanceFlags(int tenant, string user, bool important, List<int> ids)

var update_mail_query = new SqlUpdate(MailTable.name)
                .Set(MailTable.Columns.importance, important)
                .Where(GetUserWhere(user, tenant));
                
            var where = Exp.Empty;
                for (var i = 0; i < chains_info.Count; ++i)
                {
                    var innerWhere = Exp.Empty;
                    var chain = chains_info[i];

                    innerWhere = Exp.Eq(MailTable.Columns.chain_id, chain.id) & Exp.Eq(MailTable.Columns.id_mailbox, chain.mailbox);

                    if (chain.folder == MailFolder.Ids.inbox || chain.folder == MailFolder.Ids.sent)
                    {
                        innerWhere &= (Exp.Eq(MailTable.Columns.folder, MailFolder.Ids.inbox) | Exp.Eq(MailTable.Columns.folder, MailFolder.Ids.sent));
                    }
                    else
                    {
                        innerWhere &= Exp.Eq(MailTable.Columns.folder, chain.folder);
                    }

                    where |= innerWhere;
                }

                db.ExecuteNonQuery(update_mail_query.Where(where));

QUERY:
UPDATE mail_mail SET importance = @p0
WHERE tenant = @p1 AND id_user = @p2 AND chain_id = @p3 AND id_mailbox = @p4 AND (folder = @p5 OR folder = @p6)

EXPLAIN 
SELECT * FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND chain_id = '9306' AND id_mailbox = 36 AND (folder = 1 OR folder = 2)

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">range</field>
		<field name="possible_keys">chain_index_folders,id_mailbox,time_modified,main</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">776</field>
		<field name="ref" xsi:nil="true" />
		<field name="rows">2</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>

  
6. private List<MailMessageItem> GetFilteredChains(
            IDbManager db,
            int id_tenant,
            string id_user,
            MailFilter filter,
            DateTime? utc_chain_from_date,
            int from_message,
            bool? prev_flag,
            out bool has_more)
            
            
var query_messages = new SqlQuery(MailTable.name)
                .Select(
                    MailTable.Columns.id,
                    MailTable.Columns.from,
                    MailTable.Columns.to,
                    MailTable.Columns.reply,
                    MailTable.Columns.subject,
                    MailTable.Columns.importance,
                    MailTable.Columns.date_sent,
                    MailTable.Columns.size,
                    MailTable.Columns.attach_count,
                    MailTable.Columns.unread,
                    MailTable.Columns.is_answered,
                    MailTable.Columns.is_forwarded,
                    MailTable.Columns.is_from_crm,
                    MailTable.Columns.is_from_tl,
                    MailTable.Columns.folder_restore,
                    MailTable.Columns.folder,
                    MailTable.Columns.chain_id,
                    MailTable.Columns.id_mailbox,
                    MailTable.Columns.chain_date)
                .Where(GetUserWhere(id_user, id_tenant))
                .Where(MailTable.Columns.is_removed, false)
                .ApplyFilter(filter)
                .OrderBy(MailTable.Columns.chain_date, sort_order);

            if (null != utc_chain_from_date)
            {
                query_messages = query_messages.Where(sort_order ?
                    Exp.Ge(MailTable.Columns.chain_date, utc_chain_from_date) :
                    Exp.Le(MailTable.Columns.chain_date, utc_chain_from_date));
                skip_flag = true;
            }

            // We are increasing the size of the page to check whether it is necessary to show the Next button.
            while (res.Count < filter.PageSize + 1)
            {
                query_messages.SetFirstResult(chunck_index * chunk_size * filter.PageSize).SetMaxResults(chunk_size * filter.PageSize);
                chunck_index++;

                var tenant_obj = CoreContext.TenantManager.GetTenant(id_tenant);
                var list = db
                    .ExecuteList(query_messages)

                    
            public static SqlQuery ApplyFilter(this SqlQuery query, MailFilter filter)

            Exp conditions = null;

            if (!string.IsNullOrEmpty(alias))
                alias += ".";

            if (!skip_folder)
                conditions = Exp.Eq(alias + MailTable.Columns.folder, filter.PrimaryFolder);

            if (filter.CustomLabels != null && filter.CustomLabels.Count > 0)
            {
                var ids_with_any_of_tags = new SqlQuery(MailBoxManager.MAIL_TAG_MAIL)
                    .Select(MailBoxManager.TagMailFields.id_mail)
                    .Where(Exp.In(MailBoxManager.TagMailFields.id_tag, filter.CustomLabels));

                var ids_with_all_tags = new SqlQuery()
                    .Select(MailBoxManager.TagMailFields.id_mail)
                    .From(ids_with_any_of_tags, "a")
                    .GroupBy(MailBoxManager.TagMailFields.id_mail)
                    .Having(
                        Exp.Eq("count(a." + MailBoxManager.TagMailFields.id_mail + ")", filter.CustomLabels.Count()));

                conditions &= Exp.In(alias + MailTable.Columns.id, ids_with_all_tags);
            }

            if (filter.Unread.HasValue)
            {
                conditions &= Exp.Eq(alias + MailTable.Columns.unread, filter.Unread);
            }

            if (filter.Attachments)
                conditions &= Exp.Gt(alias + MailTable.Columns.attach_count, 0);

            if (filter.Period_from > 0)
            {
                var from = new DateTime(1970, 1, 1) + new TimeSpan(filter.Period_from * 10000);
                var to = new DateTime(1970, 1, 1) + new TimeSpan(filter.Period_to * 10000) +
                         new TimeSpan(1, 0, 0, 0, 0); // 1 day was added to make the "To" date limit inclusive
                conditions &= Exp.Between(alias + MailTable.Columns.date_sent, from, to);
            }

            if (filter.Important)
            {
                conditions &= Exp.Eq(alias + MailTable.Columns.importance, true);
            }

            if (!string.IsNullOrEmpty(filter.FindAddress))
            {
                if (filter.PrimaryFolder == MailFolder.Ids.sent || filter.PrimaryFolder == MailFolder.Ids.drafts)
                    conditions &= Exp.Like(alias + MailTable.Columns.to, filter.FindAddress, SqlLike.AnyWhere);
                else
                    conditions &= Exp.Like(alias + MailTable.Columns.from, filter.FindAddress, SqlLike.AnyWhere);
            }

            if (filter.MailboxId.HasValue)
            {
                conditions &= Exp.Eq(alias + MailTable.Columns.id_mailbox, filter.MailboxId.Value);
            }

            if (!string.IsNullOrEmpty(filter.SearchFilter))
            {
                if (FullTextSearch.SupportModule(FullTextSearch.MailModule))
                {
                    var ids = FullTextSearch.Search(FullTextSearch.MailModule.Match(filter.SearchFilter));

                    // ToDo: replace magic number with ultra cool setting value
                    conditions &= Exp.In(alias + MailTable.Columns.id, ids.Take(200).ToList());
                }
                else
                {
                    conditions &= Exp.Or(Exp.Like(alias + MailTable.Columns.from, filter.SearchFilter, SqlLike.AnyWhere),
                                       Exp.Or(
                                           Exp.Like(alias + MailTable.Columns.to, filter.SearchFilter, SqlLike.AnyWhere),
                                           Exp.Or(
                                               Exp.Like(alias + MailTable.Columns.cc, filter.SearchFilter,
                                                        SqlLike.AnyWhere),
                                               Exp.Or(
                                                   Exp.Like(alias + MailTable.Columns.bcc, filter.SearchFilter,
                                                            SqlLike.AnyWhere),
                                                   Exp.Like(alias + MailTable.Columns.subject, filter.SearchFilter,
                                                            SqlLike.AnyWhere)))));
                }
            }

            return conditions;


QUERIES:

SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND is_removed = @p2 AND folder = @p3
ORDER BY chain_date DESC
LIMIT 75

EXPLAIN
SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false AND folder = 1
ORDER BY chain_date DESC
LIMIT 75

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">time_modified,main</field>
		<field name="key">main</field>
		<field name="key_len">776</field>
		<field name="ref">const,const,const,const</field>
		<field name="rows">415</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>

SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND is_removed = @p2 AND folder = @p3 AND unread = @p4
ORDER BY chain_date DESC
LIMIT 75

EXPLAIN
SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false AND folder = 1 and unread = true
ORDER BY chain_date DESC
LIMIT 75;

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">time_modified,main</field>
		<field name="key">main</field>
		<field name="key_len">776</field>
		<field name="ref">const,const,const,const</field>
		<field name="rows">415</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND is_removed = @p2 AND folder = @p3 AND id_mailbox = @p4
ORDER BY chain_date DESC
LIMIT 300

EXPLAIN
SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false AND folder = 1 AND id_mailbox = 36
ORDER BY chain_date DESC
LIMIT 300;

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">id_mailbox,time_modified,main</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra">Using where; Using filesort</field>
	</row>
</table_data>

SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND is_removed = @p2 AND folder = @p3 AND chain_date <= @p4
ORDER BY chain_date DESC
LIMIT 3

EXPLAIN
SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false AND folder = 1 AND chain_date <= '2012-12-28 15:55:28'
ORDER BY chain_date DESC
LIMIT 3

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">range</field>
		<field name="possible_keys">time_modified,main</field>
		<field name="key">main</field>
		<field name="key_len">784</field>
		<field name="ref" xsi:nil="true" />
		<field name="rows">138</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>

SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND is_removed = @p2 AND folder = @p3 AND id IN (@p4,@p5,@p6)
ORDER BY chain_date DESC
LIMIT 75

EXPLAIN
SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false AND folder = 1 AND id IN (9306,9307,9308)
ORDER BY chain_date DESC
LIMIT 75

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">range</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref" xsi:nil="true" />
		<field name="rows">3</field>
		<field name="Extra">Using where; Using filesort</field>
	</row>
</table_data>

SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND is_removed = @p2 AND folder = @p3 AND from_text LIKE @p4
ORDER BY chain_date DESC
LIMIT 75

EXPLAIN
SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false AND folder = 1 AND from_text LIKE '%mono.mail.4test@gmail.com%'
ORDER BY chain_date DESC
LIMIT 75

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">time_modified,main</field>
		<field name="key">main</field>
		<field name="key_len">776</field>
		<field name="ref">const,const,const,const</field>
		<field name="rows">415</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>

EXPLAIN
SELECT id, from_text, to_text, reply_to, subject, importance, date_sent, size, attachments_count, unread, is_answered, is_forwarded, is_from_crm, is_from_tl, folder_restore, folder, chain_id, id_mailbox, chain_date
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false AND folder = 1 AND id IN (
SELECT id_mail
FROM (
SELECT id_mail
FROM mail_tag_mail
WHERE id_tag = -1015) AS a
GROUP BY id_mail
HAVING COUNT(a.id_mail) = 1)
ORDER BY chain_date DESC
LIMIT 75

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">PRIMARY</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">time_modified,main</field>
		<field name="key">main</field>
		<field name="key_len">776</field>
		<field name="ref">const,const,const,const</field>
		<field name="rows">415</field>
		<field name="Extra">Using where</field>
	</row>
	<row>
		<field name="id">2</field>
		<field name="select_type">DEPENDENT SUBQUERY</field>
		<field name="table">&lt;derived3&gt;</field>
		<field name="type">ALL</field>
		<field name="possible_keys" xsi:nil="true" />
		<field name="key" xsi:nil="true" />
		<field name="key_len" xsi:nil="true" />
		<field name="ref" xsi:nil="true" />
		<field name="rows">2</field>
		<field name="Extra">Using temporary; Using filesort</field>
	</row>
	<row>
		<field name="id">3</field>
		<field name="select_type">DERIVED</field>
		<field name="table">mail_tag_mail</field>
		<field name="type">index</field>
		<field name="possible_keys" xsi:nil="true" />
		<field name="key">id_mail</field>
		<field name="key_len">4</field>
		<field name="ref" xsi:nil="true" />
		<field name="rows">3645713</field>
		<field name="Extra">Using where; Using index</field>
	</row>
</table_data>

7. private static List<object[]> GetChainedMessagesInfo(IDbManager db, int tenant, string user, List<int> ids, string[] fields)

var selected_chains_query = new SqlQuery(MailTable.name)
                .Select(MailTable.Columns.chain_id,
                        MailTable.Columns.id_mailbox,
                        MailTable.Columns.folder)
                .Where(Exp.In(MailTable.Columns.id, ids))
                .Where(MailTable.Columns.id_tenant, tenant)
                .Where(MailTable.Columns.id_user, user);

            var chains_info = db.ExecuteList(selected_chains_query)

QUERY: 
SELECT chain_id, id_mailbox, folder
FROM mail_mail
WHERE is_removed = @p0 AND tenant = @p1 AND id_user = @p2 AND id = @p3

EXPLAIN
SELECT chain_id, id_mailbox, folder
FROM mail_mail
WHERE is_removed = false AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>

8. private static List<object[]> GetChainedMessagesInfo(IDbManager db, int tenant, string user, List<int> ids, string[] fields)

var selected_messages_query = new SqlQuery(MailTable.name)
                    .Select(extended_fields.ToArray())
                    .Where(Exp.In(MailTable.Columns.chain_id, part_chains))
                    .Where(MailTable.Columns.id_tenant, tenant)
                    .Where(MailTable.Columns.id_user, user)
                    .Where(MailTable.Columns.is_removed, false);

                var selected_messages = db.ExecuteList(selected_messages_query);

QUERY:
SELECT chain_id, id_mailbox, folder, id, chain_id, folder, id_mailbox
FROM mail_mail
WHERE chain_id IN (@p0,@p1) AND tenant = @p2 AND id_user = @p3 AND is_removed = @p4

EXPLAIN
SELECT chain_id, id_mailbox, folder, id, chain_id, folder, id_mailbox
FROM mail_mail
WHERE chain_id IN ('9306','9307') AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">range</field>
		<field name="possible_keys">chain_index_folders,time_modified,main</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">768</field>
		<field name="ref" xsi:nil="true" />
		<field name="rows">2</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


SELECT chain_id, id_mailbox, folder, id, unread, folder, chain_id, id_mailbox
FROM mail_mail
WHERE chain_id = @p0 AND tenant = @p1 AND id_user = @p2 AND is_removed = @p3

EXPLAIN
SELECT chain_id, id_mailbox, folder, id, chain_id, folder, id_mailbox
FROM mail_mail
WHERE chain_id = '9306' AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">chain_index_folders,time_modified,main</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">768</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


9. private void UpdateChain(IDbManager db, string chain_id, int folder, int id_mailbox, int tenant, string user)

var chain = db.ExecuteList(
                new SqlQuery(MailTable.name)
                    .SelectCount()
                    .SelectMax(MailTable.Columns.date_sent)
                    .SelectMax(MailTable.Columns.unread)
                    .SelectMax(MailTable.Columns.attach_count)
                    .SelectMax(MailTable.Columns.importance)
                    .Where(GetUserWhere(user, tenant))
                    .Where(MailTable.Columns.is_removed, 0)
                    .Where(MailTable.Columns.chain_id, chain_id)
                    .Where(MailTable.Columns.id_mailbox, id_mailbox)
                    .Where(MailTable.Columns.folder, folder))

QUERY:
SELECT COUNT(*), MAX(date_sent), MAX(unread), MAX(attachments_count), MAX(importance)
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND is_removed = @p2 AND chain_id = @p3 AND id_mailbox = @p4 AND folder = @p5

EXPLAIN
SELECT COUNT(*), MAX(date_sent), MAX(unread), MAX(attachments_count), MAX(importance)
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false AND chain_id = '9306' AND id_mailbox = 36 AND folder = 1

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">chain_index_folders,id_mailbox,time_modified,main</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">776</field>
		<field name="ref">const,const,const</field>
		<field name="rows">1</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


10. private void UpdateChain(IDbManager db, string chain_id, int folder, int id_mailbox, int tenant, string user)

db.ExecuteNonQuery(
                    new SqlUpdate(MailTable.name)
                        .Where(GetUserWhere(user, tenant))
                        .Where(MailTable.Columns.is_removed, 0)
                        .Where(MailTable.Columns.chain_id, chain_id)
                        .Where(MailTable.Columns.id_mailbox, id_mailbox)
                        .Where(MailTable.Columns.folder, folder) // Folder condition important because chain has different dates in different folders(Ex: Sent and Inbox).
                        .Set(MailTable.Columns.chain_date, chain.date));

QUERY:
UPDATE mail_mail SET chain_date = @p0
WHERE tenant = @p1 AND id_user = @p2 AND is_removed = @p3 AND chain_id = @p4 AND id_mailbox = @p5 AND folder = @p6

EXPLAIN
SELECT * FROM mail_mail 
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false AND chain_id = '9306' AND id_mailbox = 36 AND folder = 1

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">chain_index_folders,id_mailbox,time_modified,main</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">776</field>
		<field name="ref">const,const,const</field>
		<field name="rows">1</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


11. private void UpdateMessageChainFlag(IDbManager db, int tenant, string user, int message_id, string field_from, string field_to)

Exp condition;

            if (folder == MailFolder.Ids.inbox || folder == MailFolder.Ids.sent)
                condition = Exp.In(folder_name, new[] { MailFolder.Ids.inbox, MailFolder.Ids.sent });
            else
                condition = Exp.Eq(folder_name, folder);

var field_query = new SqlQuery(MailTable.name)
                .SelectMax(field_from)
                .Where(MailTable.Columns.is_removed, 0)
                .Where(MailTable.Columns.chain_id, chain.id)
                .Where(MailTable.Columns.id_mailbox, chain.mailbox)
                .Where(GetUserWhere(user, tenant))
                .Where(condition);

            var field_val = db.ExecuteScalar<bool>(field_query);

QUERY:
SELECT MAX(attachments_count)
FROM mail_mail
WHERE is_removed = @p0 AND chain_id = @p1 AND id_mailbox = @p2 AND tenant = @p3 AND id_user = @p4 AND folder = @p5

EXPLAIN
SELECT MAX(attachments_count) FROM mail_mail 
WHERE is_removed = false AND chain_id = '9306' AND id_mailbox = 36 AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND folder = 1

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">chain_index_folders,id_mailbox,time_modified,main</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">776</field>
		<field name="ref">const,const,const</field>
		<field name="rows">1</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


SELECT MAX(importance)
FROM mail_mail
WHERE is_removed = @p0 AND chain_id = @p1 AND id_mailbox = @p2 AND tenant = @p3 AND id_user = @p4 AND folder IN (@p5,@p6)

EXPLAIN
SELECT MAX(importance)
FROM mail_mail
WHERE is_removed = false AND chain_id = '9306' AND id_mailbox = 36 AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND folder IN (1, 2);

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">range</field>
		<field name="possible_keys">chain_index_folders,id_mailbox,time_modified,main</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">776</field>
		<field name="ref" xsi:nil="true" />
		<field name="rows">2</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


SELECT MAX(unread)
FROM mail_mail
WHERE is_removed = @p0 AND chain_id = @p1 AND id_mailbox = @p2 AND tenant = @p3 AND id_user = @p4 AND folder IN (@p5,@p6)

EXPLAIN
SELECT MAX(unread)
FROM mail_mail 
WHERE is_removed = false AND chain_id = '9306' AND id_mailbox = 36 AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND folder IN (1, 2)

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">range</field>
		<field name="possible_keys">chain_index_folders,id_mailbox,time_modified,main</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">776</field>
		<field name="ref" xsi:nil="true" />
		<field name="rows">2</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


12. private ChainInfo GetMessageChainInfo(IDbManager db, int tenant, string user, int message_id)

var info = db.ExecuteList(new SqlQuery(MailTable.name)
                .Select(MailTable.Columns.chain_id, MailTable.Columns.folder, MailTable.Columns.id_mailbox)
                .Where(MailTable.Columns.id, message_id)
                .Where(GetUserWhere(user, tenant)));

QUERY:
SELECT chain_id, folder, id_mailbox
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND id = @p2

EXPLAIN
SELECT chain_id, folder, id_mailbox
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


13. private string GetChainTags(IDbManager db, string chain_id, int folder, int id_mailbox, int tenant, string user_id)

var mail_query = new SqlQuery(MailTable.name)
                .Select(MailTable.Columns.id)
                .Where(MailTable.Columns.chain_id, chain_id)
                .Where(MailTable.Columns.is_removed, 0)
                .Where(GetUserWhere(user_id, tenant))
                .Where(MailTable.Columns.folder, folder)
                .Where(MailTable.Columns.id_mailbox, id_mailbox);

            var new_query = new SqlQuery(MAIL_TAG_MAIL + " " + mtm_alias)
                .Select(TagMailFields.id_tag.Prefix(mtm_alias))
                .Distinct()
                .InnerJoin(mail_query, mm_alias,
                           Exp.EqColumns(MailTable.Columns.id.Prefix(mm_alias), TagMailFields.id_mail.Prefix(mtm_alias)))
                .OrderBy(TagMailFields.time_created.Prefix(mtm_alias), true);


            var tags = db.ExecuteList(new_query)

QUERY:
SELECT DISTINCT tm.id_tag
FROM mail_tag_mail tm
INNER JOIN (
SELECT id
FROM mail_mail
WHERE chain_id = @p0 AND is_removed = @p1 AND tenant = @p2 AND id_user = @p3 AND folder = @p4 AND id_mailbox = @p5) AS ch ON ch.id = tm.id_mail
ORDER BY tm.time_created ASC

EXPLAIN
SELECT DISTINCT tm.id_tag
FROM mail_tag_mail tm
INNER JOIN (
SELECT id
FROM mail_mail
WHERE chain_id = '9306' AND is_removed = 0 AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND folder = 2 AND id_mailbox = 36) AS ch ON ch.id = tm.id_mail
ORDER BY tm.time_created ASC

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">PRIMARY</field>
		<field name="table">&lt;derived2&gt;</field>
		<field name="type">system</field>
		<field name="possible_keys" xsi:nil="true" />
		<field name="key" xsi:nil="true" />
		<field name="key_len" xsi:nil="true" />
		<field name="ref" xsi:nil="true" />
		<field name="rows">1</field>
		<field name="Extra">Using temporary; Using filesort</field>
	</row>
	<row>
		<field name="id">1</field>
		<field name="select_type">PRIMARY</field>
		<field name="table">tm</field>
		<field name="type">ref</field>
		<field name="possible_keys">id_mail</field>
		<field name="key">id_mail</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra">Using where</field>
	</row>
	<row>
		<field name="id">2</field>
		<field name="select_type">DERIVED</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">chain_index_folders,id_mailbox,time_modified,main</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">776</field>
		<field name="ref"></field>
		<field name="rows">1</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


14. private void RecalculateFolders(IDbManager db, int tenant, string user)

var unread_messages_count_by_folder =
                db.ExecuteList(
                    new SqlQuery(MailTable.name)
                        .Select(MailTable.Columns.folder, "count(1)")
                        .Where(GetUserWhere(user, tenant))
                        .Where(MailTable.Columns.unread, true)
                        .Where(MailTable.Columns.is_removed, false)
                        .GroupBy(MailTable.Columns.folder))

QUERY:
SELECT folder, COUNT(1)
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND unread = @p2 AND is_removed = @p3
GROUP BY folder

EXPLAIN
SELECT folder, COUNT(1)
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND unread = 1 AND is_removed = 0
GROUP BY folder

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">time_modified,main</field>
		<field name="key">main</field>
		<field name="key_len">772</field>
		<field name="ref">const,const,const</field>
		<field name="rows">1114</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>

15. private void RecalculateFolders(IDbManager db, int tenant, string user)

var total_messages_count_by_folder =
                db.ExecuteList(
                    new SqlQuery(MailTable.name)
                        .Select(MailTable.Columns.folder, "count(1)")
                        .Where(GetUserWhere(user, tenant))
                        .Where(MailTable.Columns.is_removed, false)
                        .GroupBy(MailTable.Columns.folder))

QUERY:
SELECT folder, COUNT(1)
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND is_removed = @p2
GROUP BY folder

EXPLAIN
SELECT folder, COUNT(1)
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = 0
GROUP BY folder

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">time_modified,main</field>
		<field name="key">main</field>
		<field name="key_len">772</field>
		<field name="ref">const,const,const</field>
		<field name="rows">1114</field>
		<field name="Extra">Using where; Using index</field>
	</row>
</table_data>


16. public long RemoveMailBox(MailBox mail_box, DbManager db)

db.ExecuteNonQuery(
                new SqlUpdate(MailTable.name)
                    .Set(MailTable.Columns.is_removed, true)
                    .Where(MailTable.Columns.id_mailbox, mail_box.MailBoxId)
                    .Where(GetUserWhere(mail_box.UserId, mail_box.TenantId)));

QUERY:
UPDATE mail_mail SET is_removed = @p0
WHERE id_mailbox = @p1 AND tenant = @p2 AND id_user = @p3

EXPLAIN
SELECT *
FROM mail_mail
WHERE id_mailbox = 36 AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e'

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">id_mailbox,time_modified,main</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>

17. public long RemoveMailBox(MailBox mail_box, DbManager db)

var total_attachments_size = db.ExecuteScalar<long>(
                string.Format(
                    "select sum(a.size) from {0} a inner join {1} m on a.{2} = m.{3} where m.{4} = @mailbox_id and m.{5} = @tid and a.{6} != @need_remove",
                    AttachmentTable.name,
                    MailTable.name,
                    AttachmentTable.Columns.id_mail,
                    MailTable.Columns.id,
                    MailTable.Columns.id_mailbox,
                    MailTable.Columns.id_tenant,
                    AttachmentTable.Columns.need_remove), new { tid = mail_box.TenantId, need_remove = true, mailbox_id = mail_box.MailBoxId });

QUERY:
SELECT SUM(a.size)
FROM mail_attachment a
INNER JOIN mail_mail m ON a.id_mail = m.id
WHERE m.id_mailbox = @mailbox_id AND m.tenant = @tid AND a.need_remove != @need_remove

EXPLAIN
SELECT SUM(a.size)
FROM mail_attachment a
INNER JOIN mail_mail m ON a.id_mail = m.id
WHERE m.id_mailbox = 36 AND m.tenant = 10113 AND a.need_remove = true

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">m</field>
		<field name="type">ref</field>
		<field name="possible_keys">PRIMARY,id_mailbox,time_modified,main</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra">Using where</field>
	</row>
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">a</field>
		<field name="type">ref</field>
		<field name="possible_keys">quota_index,main</field>
		<field name="key">quota_index</field>
		<field name="key_len">8</field>
		<field name="ref">teamlab_info.m.id,const</field>
		<field name="rows">1</field>
		<field name="Extra">Using index</field>
	</row>
</table_data>


18. public long RemoveMailBox(MailBox mail_box, DbManager db)

            var query = string.Format("update {0} a inner join {1} m on a.{2} = m.{3} set a.{4} = @need_remove where m.{5} = @mailbox_id",
                    AttachmentTable.name, MailTable.name, AttachmentTable.Columns.id_mail, MailTable.Columns.id, AttachmentTable.Columns.need_remove, MailTable.Columns.id_mailbox);

            db.ExecuteNonQuery(query, new { need_remove = true, mailbox_id = mail_box.MailBoxId });

QUERY:
UPDATE mail_attachment a
INNER JOIN mail_mail m ON a.id_mail = m.id SET a.need_remove = @need_remove
WHERE m.id_mailbox = @mailbox_id

EXPLAIN
SELECT * FROM mail_attachment a
INNER JOIN mail_mail m ON a.id_mail = m.id 
WHERE m.id_mailbox = 36

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">m</field>
		<field name="type">ref</field>
		<field name="possible_keys">PRIMARY,id_mailbox</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra"></field>
	</row>
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">a</field>
		<field name="type">ref</field>
		<field name="possible_keys">quota_index,main</field>
		<field name="key">quota_index</field>
		<field name="key_len">4</field>
		<field name="ref">teamlab_info.m.id</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


19. public long RemoveMailBox(MailBox mail_box, DbManager db)

query = string.Format("select t.{0} from {1} t inner join {2} m on t.{3} = m.{4} where m.{5} = @mailbox_id",
                TagMailFields.id_tag, MAIL_TAG_MAIL, MailTable.name, TagMailFields.id_mail, MailTable.Columns.id, MailTable.Columns.id_mailbox);

            var affected_tags = db.ExecuteList(query, new { mailbox_id = mail_box.MailBoxId })

QUERY:
SELECT t.id_tag
FROM mail_tag_mail t
INNER JOIN mail_mail m ON t.id_mail = m.id
WHERE m.id_mailbox = @mailbox_id

EXPLAIN
SELECT t.id_tag
FROM mail_tag_mail t
INNER JOIN mail_mail m ON t.id_mail = m.id
WHERE m.id_mailbox = 36

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">m</field>
		<field name="type">ref</field>
		<field name="possible_keys">PRIMARY,id_mailbox</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra">Using index</field>
	</row>
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">t</field>
		<field name="type">ref</field>
		<field name="possible_keys">id_mail</field>
		<field name="key">id_mail</field>
		<field name="key_len">4</field>
		<field name="ref">teamlab_info.m.id</field>
		<field name="rows">1</field>
		<field name="Extra">Using index</field>
	</row>
</table_data>


20. private void SetMessagesReadFlags(IDbManager db, int tenant, string user, IEnumerable<MessageInfoToSetUnread> messages_info, bool is_read)

db.ExecuteNonQuery(
                new SqlUpdate(MailTable.name)
                    .Where(Exp.In(MailTable.Columns.id, ids))
                    .Where(GetUserWhere(user, tenant))
                    .Set(MailTable.Columns.unread, !is_read));

QUERY:

UPDATE mail_mail SET unread = @p0
WHERE id = @p1 AND tenant = @p2 AND id_user = @p3

EXPLAIN
SELECT * FROM mail_mail
WHERE id = 9306 AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e'

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


UPDATE mail_mail SET unread = @p0
WHERE id IN (@p1,@p2) AND tenant = @p3 AND id_user = @p4

EXPLAIN
SELECT * FROM mail_mail
WHERE id IN (9306, 9307) AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e'

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">range</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref" xsi:nil="true" />
		<field name="rows">2</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>

22. public void DeleteFoldersMessages(int id_tenant, string id_user, int folder)

var ids = db.ExecuteList(
                    new SqlQuery(MailTable.name)
                        .Select(MailTable.Columns.id)
                        .Where(MailTable.Columns.is_removed, false)
                        .Where(MailTable.Columns.folder, folder)
                        .Where(GetUserWhere(id_user, id_tenant)))

QUERY:
SELECT id
FROM mail_mail
WHERE is_removed = @p0 AND folder = @p1 AND tenant = @p2 AND id_user = @p3

EXPLAIN
SELECT id
FROM mail_mail
WHERE is_removed = false AND folder = 2 AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e'

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">time_modified,main</field>
		<field name="key">main</field>
		<field name="key_len">776</field>
		<field name="ref">const,const,const,const</field>
		<field name="rows">5</field>
		<field name="Extra">Using where; Using index</field>
	</row>
</table_data>


23. public void DeleteFoldersMessages(int id_tenant, string id_user, int folder)

db.ExecuteNonQuery(
                            new SqlUpdate(MailTable.name)
                                .Set(MailTable.Columns.is_removed, true)
                                .Where(GetUserWhere(id_user, id_tenant))
                                .Where(MailTable.Columns.folder, folder));

QUERY:
UPDATE mail_mail SET is_removed = @p0
WHERE tenant = @p1 AND id_user = @p2 AND folder = @p3

EXPLAIN
SELECT * FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND folder = 2

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">time_modified,main</field>
		<field name="key">time_modified</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">2614</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>

24. public void GetStoredMessagesUidl(int mailbox_id, Dictionary<int, string> uidl_list)

db.ExecuteList(
                    new SqlQuery(MailTable.name)
                        .Select(MailTable.Columns.id, MailTable.Columns.uidl)
                        .Where(MailTable.Columns.id_mailbox, mailbox_id))
                  .ForEach(r => uidl_list.Add(Convert.ToInt32(r[0]), (string)r[1]));

QUERY:
SELECT id, uidl
FROM mail_mail
WHERE id_mailbox = @p0

EXPLAIN
SELECT id, uidl
FROM mail_mail
WHERE id_mailbox = 36

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">id_mailbox</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra"></field>
	</row>
</table_data>

25. public void GetStoredMessagesUIDL_MD5(int mailbox_id, Dictionary<int, string> uidl_list,
                                              Dictionary<int, string> md5_list)
                                              
db.ExecuteList(
                    new SqlQuery(MailTable.name)
                        .Select(MailTable.Columns.id, MailTable.Columns.uidl, MailTable.Columns.md5)
                        .Where(MailTable.Columns.id_mailbox, mailbox_id))

QUERY:
SELECT id, uidl, MD5
FROM mail_mail
WHERE id_mailbox = @p0

EXPLAIN
SELECT id, uidl, md5
FROM mail_mail
WHERE id_mailbox = 36

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">id_mailbox</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra"></field>
	</row>
</table_data>


26. public int MailSave(MailBox mail_box, MailMessageItem mail, int mail_id, int folder, int folder_restore, 
            string uidl, string md5, bool save_attachments)

var update = new SqlUpdate(MailTable.name)
                                    .Where(MailTable.Columns.id, mail_id)
                                    .Set(MailTable.Columns.id_mailbox, mail_box.MailBoxId)
                                    .Set(MailTable.Columns.from, mail.From)
                                    .Set(MailTable.Columns.to, mail.To)
                                    .Set(MailTable.Columns.reply, mail.ReplyTo)
                                    .Set(MailTable.Columns.subject, mail.Subject)
                                    .Set(MailTable.Columns.cc, mail.Cc)
                                    .Set(MailTable.Columns.bcc, mail.Bcc)
                                    .Set(MailTable.Columns.importance, mail.Important)
                                    .Set(MailTable.Columns.date_received, DateTime.UtcNow)
                                    .Set(MailTable.Columns.date_sent, mail.Date.ToUniversalTime())
                                    .Set(MailTable.Columns.size, mail.Size)
                                    .Set(MailTable.Columns.attach_count,
                                         !save_attachments
                                             ? count_attachments
                                             : (mail.Attachments != null ? mail.Attachments.Count : 0))
                                    .Set(MailTable.Columns.unread, mail.IsNew)
                                    .Set(MailTable.Columns.is_answered, mail.IsAnswered)
                                    .Set(MailTable.Columns.is_forwarded, mail.IsForwarded)
                                    .Set(MailTable.Columns.stream, mail.StreamId)
                                    .Set(MailTable.Columns.folder, folder)
                                    .Set(MailTable.Columns.folder_restore, folder_restore)
                                    .Set(MailTable.Columns.is_from_crm, mail.IsFromCRM)
                                    .Set(MailTable.Columns.is_from_tl, mail.IsFromTL)
                                    .Set(MailTable.Columns.is_text_body_only, mail.TextBodyOnly)
                                    .Set(MailTable.Columns.spam, 0)
                                    .Set(MailTable.Columns.mime_message_id, mail.MimeMessageId)
                                    .Set(MailTable.Columns.mime_in_reply_to, mail.MimeReplyToId)
                                    .Set(MailTable.Columns.chain_id, mail.ChainId);

                                db.ExecuteNonQuery(update);

QUERY:
UPDATE mail_mail SET id_mailbox = @p0, from_text = @p1, to_text = @p2, reply_to = @p3, subject = @p4, cc = @p5, bcc = @p6, importance = @p7, date_received = @p8, date_sent = @p9, size = @p10, attachments_count = @p11, unread = @p12, is_answered = @p13, is_forwarded = @p14, stream = @p15, folder = @p16, folder_restore = @p17, is_from_crm = @p18, is_from_tl = @p19, is_text_body_only = @p20, spam = @p21, mime_message_id = @p22, mime_in_reply_to = @p23, chain_id = @p24
WHERE id = @p25

EXPLAIN
SELECT * FROM mail_mail
WHERE id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


27. public void UpdateMessageChainId(MailBox mailbox, long message_id, int folder, string old_chain_id, string new_chain_id)

db.ExecuteNonQuery(
                            new SqlUpdate(MailTable.name)
                                .Set(MailTable.Columns.chain_id, new_chain_id)
                                .Where(GetUserWhere(mailbox.UserId, mailbox.TenantId))
                                .Where(MailTable.Columns.id, message_id));

QUERY:
UPDATE mail_mail SET chain_id = @p0
WHERE tenant = @p1 AND id_user = @p2 AND id = @p3

EXPLAIN
SELECT * FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>

28. public void UpdateMessagesChains(IDbManager db, MailBox mailbox, string mime_message_id, string chain_id,
                                         int folder)
                                         
db.ExecuteNonQuery(
                        new SqlUpdate(MailTable.name)
                            .Set(MailTable.Columns.chain_id, chain_id)
                            .Where(MailTable.Columns.chain_id, mime_message_id)
                            .Where(MailTable.Columns.id_mailbox, mailbox.MailBoxId)
                            .Where(GetUserWhere(mailbox.UserId, mailbox.TenantId))
                            .Where(MailTable.Columns.is_removed, false));

QUERY:
UPDATE mail_mail SET chain_id = @p0
WHERE chain_id = @p1 AND id_mailbox = @p2 AND tenant = @p3 AND id_user = @p4 AND is_removed = @p5

EXPLAIN
SELECT * FROM mail_mail
WHERE chain_id = '9306' AND id_mailbox = 36 AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">chain_index_folders,id_mailbox,time_modified,main</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">772</field>
		<field name="ref">const,const</field>
		<field name="rows">1</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


29. public void UpdateMessagesChains(IDbManager db, MailBox mailbox, string mime_message_id, string chain_id,
                                         int folder)
                                         
var new_chains_for_update = db.ExecuteList(
                        new SqlQuery(MailTable.name)
                            .Select(MailTable.Columns.folder)
                            .Where(MailTable.Columns.chain_id, chain_id)
                            .Where(MailTable.Columns.id_mailbox, mailbox.MailBoxId)
                            .Where(GetUserWhere(mailbox.UserId, mailbox.TenantId))
                            .Where(MailTable.Columns.is_removed, false)
                            .Distinct())

QUERY:
SELECT DISTINCT folder
FROM mail_mail
WHERE chain_id = @p0 AND id_mailbox = @p1 AND tenant = @p2 AND id_user = @p3 AND is_removed = @p4

EXPLAIN
SELECT DISTINCT folder
FROM mail_mail
WHERE chain_id = '9306' AND id_mailbox = 36 AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">chain_index_folders,id_mailbox,time_modified,main</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">772</field>
		<field name="ref">const,const</field>
		<field name="rows">1</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


30. public MailMessageItem GetMailInfo(int tenant, string user, int id_mail, bool load_images, bool load_body)

db.ExecuteNonQuery(
                            new SqlUpdate(MailTable.name)
                                .Where(MailTable.Columns.id, id_mail)
                                .Where(GetUserWhere(user, tenant))
                                .Set(MailTable.Columns.unread, false));

QUERY:

EXPLAIN
SELECT *
FROM mail_mail t
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">t</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>

31. public MailMessageItem GetMailInfo(IDbManager db, int id_tenant, string id_user, int id_mail, bool load_images, bool load_body)

var db_info = db.ExecuteList(
                new SqlQuery(MailTable.name)
                    .Select(
                        MailTable.Columns.address,
                        MailTable.Columns.chain_id,
                        MailTable.Columns.chain_date,
                        MailTable.Columns.importance,
                        MailTable.Columns.date_sent,
                        MailTable.Columns.from,
                        MailTable.Columns.to,
                        MailTable.Columns.cc,
                        MailTable.Columns.bcc,
                        MailTable.Columns.reply,
                        MailTable.Columns.stream,
                        MailTable.Columns.is_answered,
                        MailTable.Columns.is_forwarded,
                        MailTable.Columns.subject,
                        MailTable.Columns.attach_count,
                        MailTable.Columns.size,
                        MailTable.Columns.is_from_tl,
                        MailTable.Columns.folder,
                        MailTable.Columns.unread,
                        MailTable.Columns.introduction,
                        MailTable.Columns.is_text_body_only,
                        MailTable.Columns.id_mailbox,
                        MailTable.Columns.folder_restore,
                        MailTable.Columns.has_parse_error,
                        MailTable.Columns.mime_message_id,
                        MailTable.Columns.mime_in_reply_to
                    )
                    .Where(GetUserWhere(id_user, id_tenant))
                    .Where(MailTable.Columns.is_removed, false)
                    .Where(MailTable.Columns.id, id_mail))

QUERY:
SELECT address, chain_id, chain_date, importance, date_sent, from_text, to_text, cc, bcc, reply_to, stream, is_answered, is_forwarded, subject, attachments_count, size, is_from_tl, folder, unread, introduction, is_text_body_only, id_mailbox, folder_restore, has_parse_error, mime_message_id, mime_in_reply_to
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND is_removed = @p2 AND id = @p3

EXPLAIN
SELECT address, chain_id, chain_date, importance, date_sent, from_text, to_text, cc, bcc, reply_to, stream, is_answered, is_forwarded, subject, attachments_count, size, is_from_tl, folder, unread, introduction, is_text_body_only, id_mailbox, folder_restore, has_parse_error, mime_message_id, mime_in_reply_to
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


32. public MailMessageItem GetMailInfo(IDbManager db, int id_tenant, string id_user, int id_mail, bool load_images, bool load_body)

db.ExecuteNonQuery( new SqlUpdate(MailTable.name)
                            .Set(MailTable.Columns.introduction, item.Introduction)
                            .Where(GetUserWhere(id_user, id_tenant))
                            .Where(MailTable.Columns.id, id_mail));

QUERY:
UPDATE mail_mail SET introduction = @p0
WHERE tenant = @p1 AND id_user = @p2 AND id = @p3

EXPLAIN
SELECT *
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


33. public List<MailAttachment> GetMessageAttachments(int id_tenant, string id_user, int id_mail)

var db_info =
                    db.ExecuteList(
                        new SqlQuery(MailTable.name)
                            .Select(
                                MailTable.Columns.stream,
                                MailTable.Columns.attach_count
                            )
                            .Where(GetUserWhere(id_user, id_tenant))
                            .Where(MailTable.Columns.id, id_mail))

QUERY:

EXPLAIN
SELECT t.stream, t.attachments_count
FROM mail_mail t
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">t</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


34. private List<MailAttachment> GetMessageAttachments(IDbManager db, int id_tenant, string id_user, int id_mail)

var attachments_select_query = new SqlQuery(AttachmentTable.name)
                .InnerJoin(MailTable.name,
                           Exp.EqColumns(MailTable.Columns.id.Prefix(MailTable.name),
                                         AttachmentTable.Columns.id_mail.Prefix(AttachmentTable.name)))
                .Select(AttachmentTable.Columns.id.Prefix(AttachmentTable.name),
                        AttachmentTable.Columns.name.Prefix(AttachmentTable.name),
                        AttachmentTable.Columns.stored_name.Prefix(AttachmentTable.name),
                        AttachmentTable.Columns.type.Prefix(AttachmentTable.name),
                        AttachmentTable.Columns.size.Prefix(AttachmentTable.name),
                        AttachmentTable.Columns.file_number.Prefix(AttachmentTable.name),
                        MailTable.Columns.stream.Prefix(MailTable.name),
                        MailTable.Columns.id_tenant.Prefix(MailTable.name),
                        MailTable.Columns.id_user.Prefix(MailTable.name),
                        AttachmentTable.Columns.content_id.Prefix(AttachmentTable.name))
                .Where(MailTable.Columns.id.Prefix(MailTable.name), id_mail)
                .Where(AttachmentTable.Columns.need_remove.Prefix(AttachmentTable.name), false)
                .Where(AttachmentTable.Columns.content_id, Exp.Empty)
                .Where(GetUserWhere(id_user, id_tenant, MailTable.name));

            var attachments =
                db.ExecuteList(attachments_select_query)

QUERY:
SELECT mail_attachment.id, mail_attachment.name, mail_attachment.stored_name, mail_attachment.type, mail_attachment.size, mail_attachment.file_number, mail_mail.stream, mail_mail.tenant, mail_mail.id_user, mail_attachment.content_id
FROM mail_attachment
INNER JOIN mail_mail ON mail_mail.id = mail_attachment.id_mail
WHERE mail_mail.id = @p0 AND mail_attachment.need_remove = @p1 AND content_id IS NULL AND mail_mail.tenant = @p2 AND mail_mail.id_user = @p3

EXPLAIN
SELECT mail_attachment.id, mail_attachment.name, mail_attachment.stored_name, mail_attachment.type, mail_attachment.size, mail_attachment.file_number, mail_mail.stream, mail_mail.tenant, mail_mail.id_user, mail_attachment.content_id
FROM mail_attachment
INNER JOIN mail_mail ON mail_mail.id = mail_attachment.id_mail
WHERE mail_mail.id = 9306 AND mail_attachment.need_remove = 0 AND content_id IS NULL AND mail_mail.tenant = 10113 AND mail_mail.id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e'

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_attachment</field>
		<field name="type">ref</field>
		<field name="possible_keys">quota_index,main</field>
		<field name="key">quota_index</field>
		<field name="key_len">8</field>
		<field name="ref">const,const</field>
		<field name="rows">1</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>

35. public List<MailMessageItem> GetConversationMessages(int tenant, string user, int message_id,
                                                             bool load_all_content)
                                                             
var get_message_info = new SqlQuery(MailTable.name)
                .Select(MailTable.Columns.chain_id, MailTable.Columns.id_mailbox, MailTable.Columns.folder)
                .Where(MailTable.Columns.is_removed, false)
                .Where(GetUserWhere(user, tenant))
                .Where(MailTable.Columns.id, message_id);

                var message_info = db.ExecuteList(get_message_info)

QUERY:
SELECT chain_id, id_mailbox, folder
FROM mail_mail
WHERE id = @p0 AND tenant = @p1 AND id_user = @p2

EXPLAIN
SELECT chain_id, id_mailbox, folder
FROM mail_mail
WHERE id = 9306 AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e'

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


SELECT chain_id, id_mailbox, folder
FROM mail_mail
WHERE id IN (@p0,@p1) AND tenant = @p2 AND id_user = @p3

EXPLAIN
SELECT chain_id, id_mailbox, folder
FROM mail_mail
WHERE id IN (9306, 9307) AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e'

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">range</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref" xsi:nil="true" />
		<field name="rows">2</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


36. public List<MailMessageItem> GetConversationMessages(int tenant, string user, int message_id,
                                                             bool load_all_content)
                                                             
    db.ExecuteNonQuery(
                        new SqlUpdate(MailTable.name)
                            .Where(Exp.In(MailTable.Columns.id, unread_messages.Select(x => (object)x.Id).ToArray() ))
                            .Where(GetUserWhere(user, tenant))
                            .Set(MailTable.Columns.unread, false));

QUERY:

EXPLAIN
SELECT * FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>

37. public void SetMessageFolderRestore(int id_tenant, string id_user, int to_folder, int message_id)

db.ExecuteNonQuery(
                    new SqlUpdate(MailTable.name)
                        .Set(MailTable.Columns.folder_restore, to_folder)
                        .Where(GetUserWhere(id_user, id_tenant))
                        .Where(MailTable.Columns.id, message_id));

QUERY:
UPDATE mail_mail SET folder_restore = @p0
WHERE tenant = @p1 AND id_user = @p2 AND id = @p3

EXPLAIN
SELECT * FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>

39. public void UpdateMessageUidl(int id_tenant, string id_user, int id_message, string new_uidl)

db.ExecuteNonQuery(
                    new SqlUpdate(MailTable.name)
                        .Where(GetUserWhere(id_user, id_tenant))
                        .Where(MailTable.Columns.id, id_message)
                        .Set(MailTable.Columns.uidl, new_uidl));

QUERY:
UPDATE mail_mail SET uidl = @p0
WHERE tenant = @p1 AND id_user = @p2 AND id = @p3

EXPLAIN
SELECT * FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>

40. private void SetMessagesFolder(DbManager db, int id_tenant, string id_user, List<object[]> mails_info,
                                       int id_folder)
                                       
var query = new SqlUpdate(MailTable.name)
                .Set(MailTable.Columns.folder, id_folder)
                .Where(GetUserWhere(id_user, id_tenant))
                .Where(Exp.In(MailTable.Columns.id, ids));

            db.ExecuteNonQuery(query);

QUERY:
UPDATE mail_mail SET folder = @p0
WHERE tenant = @p1 AND id_user = @p2 AND id = @p3

EXPLAIN
SELECT * FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>

41. public long RemoveMailBox(MailBox mail_box, DbManager db)

query = string.Format("delete t from {0} t inner join {1} m on t.{2} = m.{3} where m.{4} = @mailbox_id",
                                  MAIL_TAG_MAIL, MailTable.name, TagMailFields.id_mail, MailTable.Columns.id, MailTable.Columns.id_mailbox);

            db.ExecuteNonQuery(query, new { mailbox_id = mail_box.MailBoxId });

QUERY:
DELETE t
FROM mail_tag_mail t
INNER JOIN mail_mail m ON t.id_mail = m.id
WHERE m.id_mailbox = @mailbox_id

EXPLAIN
SELECT *
FROM mail_tag_mail t
INNER JOIN mail_mail m ON t.id_mail = m.id
WHERE m.id_mailbox = 36

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">m</field>
		<field name="type">ref</field>
		<field name="possible_keys">PRIMARY,id_mailbox</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra"></field>
	</row>
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">t</field>
		<field name="type">ref</field>
		<field name="possible_keys">id_mail</field>
		<field name="key">id_mail</field>
		<field name="key_len">4</field>
		<field name="ref">teamlab_info.m.id</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


42. private void RestoreMessages(DbManager db, int id_tenant, string id_user, List<object[]> mails_info)

var update_query =
                new SqlUpdate(MailTable.name)
                    .Set(MailTable.Columns.folder + " = " + MailTable.Columns.folder_restore)
                    .Where(MailTable.Columns.is_removed, false)
                    .Where(GetUserWhere(id_user, id_tenant))
                    .Where(Exp.In(MailTable.Columns.id, ids_array));

QUERY:
UPDATE mail_mail SET folder = folder_restore
WHERE is_removed = @p0 AND tenant = @p1 AND id_user = @p2 AND id IN (@p3,@p4)

EXPLAIN
SELECT * FROM mail_mail
WHERE is_removed = false AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id IN (9306,9307)

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">range</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref" xsi:nil="true" />
		<field name="rows">2</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


43. private long DeleteMessages(DbManager db, int id_tenant, string id_user,
                                   List<object[]> delete_info, bool re_count_folders)
                                   
db.ExecuteNonQuery(
                new SqlUpdate(MailTable.name)
                    .Set(MailTable.Columns.is_removed, true)
                    .Where(GetUserWhere(id_user, id_tenant))
                    .Where(Exp.In(MailTable.Columns.id, message_ids)));

QUERY:
UPDATE mail_mail SET is_removed = @p0
WHERE tenant = @p1 AND id_user = @p2 AND id = @p3

EXPLAIN
SELECT * FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>

UPDATE mail_mail SET is_removed = @p0
WHERE tenant = @p1 AND id_user = @p2 AND id IN (@p3,@p4,@p5,@p6)

EXPLAIN
SELECT * FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id IN (9306, 9307)

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">range</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref" xsi:nil="true" />
		<field name="rows">2</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>

44. private List<object[]> GetMessagesInfoByMimeMessageId(
            int id_mailbox,
            string mime_message_id,
            string[] columns)
            
return db.ExecuteList(
                    new SqlQuery(MailTable.name)
                        .Select(columns)
                        .Where(MailTable.Columns.mime_message_id, mime_message_id)
                        .Where(MailTable.Columns.id_mailbox, id_mailbox));

QUERY:
SELECT id, folder_restore, uidl
FROM mail_mail
WHERE mime_message_id = @p0 AND id_mailbox = @p1

EXPLAIN
SELECT id, folder_restore, uidl
FROM mail_mail
WHERE mime_message_id = '9306' AND id_mailbox = 36

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">id_mailbox</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>

SELECT id, folder_restore, uidl
FROM mail_mail
WHERE mime_message_id IS NULL AND id_mailbox = @p0

EXPLAIN
SELECT id, folder_restore, uidl
FROM mail_mail
WHERE mime_message_id IS NULL AND id_mailbox = 36

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">id_mailbox</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


45. private int[] AddTagIdsForSelfSendedMessages(MailBox mail_box, int[] tags_ids, MailMessageItem message_item)

self_sended_message_tags_ids = db.ExecuteList(
                            new SqlQuery(MailTable.name + " mm")
                                .InnerJoin(MAIL_TAG_MAIL + " mt",
                                           Exp.EqColumns(MailTable.Columns.id.Prefix("mm"), TagMailFields.id_mail.Prefix("mt")))
                                .Select(TagMailFields.id_tag.Prefix("mt"))
                                .Where(MailTable.Columns.id_mailbox.Prefix("mm"), mail_box.MailBoxId)
                                .Where(MailTable.Columns.folder.Prefix("mm"), MailFolder.Ids.sent)
                                .Where(MailTable.Columns.mime_message_id.Prefix("mm"), message_item.MimeMessageId)
                            );

QUERY:
SELECT mt.id_tag
FROM mail_mail mm
INNER JOIN mail_tag_mail mt ON mm.id = mt.id_mail
WHERE mm.id_mailbox = @p0 AND mm.folder = @p1 AND mm.mime_message_id = @p2

EXPLAIN
SELECT mt.id_tag
FROM mail_mail mm
INNER JOIN mail_tag_mail mt ON mm.id = mt.id_mail
WHERE mm.id_mailbox = 36 AND mm.folder = 2 AND mm.mime_message_id = '9306'

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mm</field>
		<field name="type">ref</field>
		<field name="possible_keys">PRIMARY,id_mailbox</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra">Using where</field>
	</row>
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mt</field>
		<field name="type">ref</field>
		<field name="possible_keys">id_mail</field>
		<field name="key">id_mail</field>
		<field name="key_len">4</field>
		<field name="ref">teamlab_info.mm.id</field>
		<field name="rows">1</field>
		<field name="Extra">Using index</field>
	</row>
</table_data>


46. private List<object[]> GetMessagesInfo(IDbManager db, int tenant, string user,
                                               List<int> ids, string[] columns)
                                               
return db.ExecuteList(
                new SqlQuery(MailTable.name)
                    .Select(columns)
                    .Where(GetUserWhere(user, tenant))
                    .Where(Exp.In(MailTable.Columns.id, ids)));

QUERY:
SELECT id_mailbox, chain_id, folder
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND id = @p2

EXPLAIN
SELECT id_mailbox, chain_id, folder
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND id = 9306

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>


47. private void GetValidForUserMessages(
            DbManager db,
            int id_tenant,
            string id_user,
            IEnumerable<int> messages_ids,
            out List<int> valid_ids,
            out List<ChainInfo> chains)
            
var valids = db.ExecuteList(
                    new SqlQuery(MailTable.name)
                        .Select(MailTable.Columns.id, MailTable.Columns.chain_id, MailTable.Columns.folder, MailTable.Columns.id_mailbox)
                        .Where(Exp.In(MailTable.Columns.id, messages_ids.ToArray()))
                        .Where(GetUserWhere(id_user, id_tenant)))
                        

QUERY:
SELECT id, chain_id, folder, id_mailbox
FROM mail_mail
WHERE id = @p0 AND tenant = @p1 AND id_user = @p2

EXPLAIN
SELECT id, chain_id, folder, id_mailbox
FROM mail_mail
WHERE id = 9306 AND tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e'

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">const</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">PRIMARY</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra"></field>
	</row>
</table_data>

48. public string DetectChainId(MailBox mailbox, MailMessageItem message_item)

var detect_chain_by_in_reply_to_query = new SqlQuery(MailTable.name)
                            .Select(MailTable.Columns.chain_id)
                            .Where(GetUserWhere(mailbox.UserId, mailbox.TenantId))
                            .Where(MailTable.Columns.is_removed, false)
                            .Where(MailTable.Columns.id_mailbox, mailbox.MailBoxId)
                            .Where(Exp.Eq(MailTable.Columns.mime_message_id, message_item.MimeReplyToId))
                            .Distinct();

                        var chain_ids_detected_with_in_reply_to = db.ExecuteList(detect_chain_by_in_reply_to_query);

QUERY:
SELECT DISTINCT chain_id
FROM mail_mail
WHERE tenant = @p0 AND id_user = @p1 AND is_removed = @p2 AND id_mailbox = @p3 AND mime_message_id = @p4

EXPLAIN
SELECT DISTINCT chain_id
FROM mail_mail
WHERE tenant = 10113 AND id_user = 'a1d67170-b343-4046-8bf0-5f89a62d195e' AND is_removed = false AND id_mailbox = 36 AND mime_message_id ='9306'

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">id_mailbox,time_modified,main</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra">Using where; Using temporary</field>
	</row>
</table_data>


49. MailSpaceUsageStatManager -> public override List<UsageSpaceStatItem> GetStatData()

var query = new SqlQuery("mail_attachment a")
                    .InnerJoin("mail_mail m", Exp.EqColumns("a.id_mail", "m.id"))
                    .Select("m.id_user")
                    .Select("sum(a.size) as size")
                    .Where("m.tenant", TenantProvider.CurrentTenantID)
                    .Where("a.need_remove", 0)
                    .GroupBy(1)
                    .OrderBy(2, false);

                return mail_db.ExecuteList(query)

QUERY:
SELECT m.id_user, SUM(a.size) AS size
FROM mail_attachment a
INNER JOIN mail_mail m ON a.id_mail = m.id
WHERE m.tenant = @p0 AND a.need_remove = @p1
GROUP BY 1
ORDER BY 2 DESC

EXPLAIN
SELECT m.id_user, SUM(a.size) AS size
FROM mail_attachment a
INNER JOIN mail_mail m ON a.id_mail = m.id
WHERE m.tenant = 1013 AND a.need_remove = false
GROUP BY 1
ORDER BY 2 DESC

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">m</field>
		<field name="type">ref</field>
		<field name="possible_keys">PRIMARY,time_modified,main</field>
		<field name="key">main</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">1</field>
		<field name="Extra">Using where; Using temporary; Using filesort</field>
	</row>
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">a</field>
		<field name="type">ref</field>
		<field name="possible_keys">quota_index,main</field>
		<field name="key">quota_index</field>
		<field name="key_len">8</field>
		<field name="ref">teamlab_info.m.id,const</field>
		<field name="rows">1</field>
		<field name="Extra">Using index</field>
	</row>
</table_data>


50. public List<MailMessageItem> GetConversationMessages(int tenant, string user, int message_id,
                                                             bool load_all_content)

var get_messages_ids = new SqlQuery(MailTable.name)
                .Select(MailTable.Columns.id)
                .Where(MailTable.Columns.id_mailbox, id_mailbox)
                .Where(MailTable.Columns.chain_id, id_chain)
                .Where(Exp.In(MailTable.Columns.folder, search_folders.ToArray()))
                .Where(MailTable.Columns.is_removed, 0);
                                       .OrderBy(MailTable.Columns.date_sent, true);


                var query_result = db.ExecuteList(get_messages_ids);

QUERY:
SELECT id
FROM mail_mail
WHERE id_mailbox = @p0 AND chain_id = @p1 AND folder = @p2 AND is_removed = @p3
ORDER BY date_sent ASC

EXPLAIN
SELECT id
FROM mail_mail
WHERE id_mailbox = 36 AND chain_id = '9306' AND folder = 2 AND is_removed = 0
ORDER BY date_sent ASC

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">chain_index_folders,id_mailbox</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">776</field>
		<field name="ref">const,const,const</field>
		<field name="rows">1</field>
		<field name="Extra">Using where; Using filesort</field>
	</row>
</table_data>


51. private void AddChainMailsToCrmHistory(DbManager db, ChainInfo chain_info, int id_tenant, string id_user, List<CrmContactEntity> contact_ids)

            var select_chained_mails = GetQueryForChainMessagesSelection(chain_info.mailbox, chain_info.id, search_folders);
            db.ExecuteList(select_chained_mails)

QUERY:
SELECT id
FROM mail_mail
WHERE id_mailbox = @p0 AND chain_id = @p1 AND folder IN (@p2,@p3) AND is_removed = @p4

EXPLAIN
SELECT id
FROM mail_mail
WHERE id_mailbox = 36 AND chain_id = '9306' AND folder IN (1, 2) AND is_removed = 0

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">range</field>
		<field name="possible_keys">chain_index_folders,id_mailbox</field>
		<field name="key">chain_index_folders</field>
		<field name="key_len">776</field>
		<field name="ref" xsi:nil="true" />
		<field name="rows">2</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>


52 private List<object[]> GetMessagesInfoByMD5(
            int id_mailbox,
            string md5,
            string[] columns)
            
return db.ExecuteList(
                    new SqlQuery(MailTable.name)
                        .Select(columns)
                        .Where(MailTable.Columns.md5, md5)
                        .Where(MailTable.Columns.id_mailbox, id_mailbox));
                        
QUERY:
SELECT id, folder_restore, uidl
FROM mail_mail
WHERE md5 = @p0 AND id_mailbox = @p1

EXPLAIN
SELECT id, folder_restore, uidl
FROM mail_mail
WHERE md5 = 'fc9b3fa09241d66ff70141422b4d79e0' AND id_mailbox = 36

<?xml version="1.0" encoding="utf8"?>

<table_data name="UnknownTable">
	<row>
		<field name="id">1</field>
		<field name="select_type">SIMPLE</field>
		<field name="table">mail_mail</field>
		<field name="type">ref</field>
		<field name="possible_keys">id_mailbox</field>
		<field name="key">id_mailbox</field>
		<field name="key_len">4</field>
		<field name="ref">const</field>
		<field name="rows">283</field>
		<field name="Extra">Using where</field>
	</row>
</table_data>

